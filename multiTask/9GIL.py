# 多线程主要是为了利用单核CPU在计算过程中，一些存取操作引发的cpu计算间隙。如果某任务是计算密集型的，那么多线程运行很难提升该任务的效率。应该考虑使用多进程。
# 可是如果只有一个单核cpu，即使是多进程也是模拟出来的并发而非真正的并行，那么此时计算密集型的任务，使用单核多进程也很难提效。只能考虑多核多进程。
# 如果某任务是IO密集型的，也就是在计算的间隙很多，那么多线程是可以的提升效率的。当然多进程也可以，多进程多线程就更可以了。

# 死循环线程是完全的计算密集型，计算之间毫无间隙。所以它会100%占用一个cpu核，很难给其他线程留出计算间隙。
# 所以如果有两个死循环线程，在多核CPU中，可以监控到会占用200%的CPU，也就是占用两个CPU核心。

# 所以要想把N核CPU的核心全部跑满，就必须启动N个死循环线程。此时会达到占用 N00%的CPU。

# 使用 C++/C/Java等语言, 启动 N 个死循环线程，就可以达到 占用 N00%cpu的效果

# 使用Python语言可以吗？

# Python 死循环线程
import threading, multiprocessing

def loop():
    x = 0
    while True:
        x = x ^ 1

for i in range(multiprocessing.cpu_count()):
    t = threading.Thread(target=loop)
    t.start()




